version: 2.0

jobs:
  build_and_test:
    docker:
      - image: passfort/rust-musl-builder:latest
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-cargo-deps-{{ checksum "Cargo.lock" }}
            - v1-cargo-deps
      - run: cargo build --release --target=x86_64-unknown-linux-musl
      - run: cargo test --release --target=x86_64-unknown-linux-musl
      - save_cache:
          key: v1-cargo-deps-{{ checksum "Cargo.lock" }}-{{ checksum ".circleci/config.yml" }}
          paths:
            - /root/.cargo
            - target
      - persist_to_workspace:
          root: .
          paths:
            - target/x86_64-unknown-linux-musl/release/checkout
  push_and_deploy:
    docker:
      - image: passfort/cloud-deploy:latest
        environment:
          CLUSTER_staging: staging-2
          CLUSTER_testing: testing
          DATABASE_NAME_staging: p-diddy
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Authenticate to GCP
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
            gcloud config set compute/zone europe-west1-b
            gcloud config set project core-gearbox-112418
      - run: |
          gcloud container builds submit --tag $PROJECT_URI/checkout:$CIRCLE_SHA1 .
      - run: |
          eval export DATABASE_NAME="\$DATABASE_NAME_$CIRCLE_BRANCH"
          eval export DATABASE_URL="\$DATABASE_URL_$CIRCLE_BRANCH"
          eval export CLUSTER="\$CLUSTER_$CIRCLE_BRANCH"

          echo "Deploying $CIRCLE_SHA1 to $CLUSTER..."

          gcloud config set container/cluster $CLUSTER
          gcloud container clusters get-credentials $CLUSTER

          cat kubernetes/deployment.yml | envsubst | kubectl apply -f -

  deploy:
    docker:
      - image: passfort/cloud-deploy:latest
        environment:
          CLUSTER_master: production
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Authenticate to GCP
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
            gcloud config set compute/zone europe-west1-b
            gcloud config set project core-gearbox-112418
      - run:
          name: Ensure commit has been built
          command: |
            gcloud container images list-tags $PROJECT_URI/checkout --format='value(tags[])' | grep "^$CIRCLE_SHA1$"
      - run: |
          eval export DATABASE_NAME="\$DATABASE_NAME_$CIRCLE_BRANCH"
          eval export DATABASE_URL="\$DATABASE_URL_$CIRCLE_BRANCH"
          eval export CLUSTER="\$CLUSTER_$CIRCLE_BRANCH"

          echo "Deploying $CIRCLE_SHA1 to $CLUSTER..."

          gcloud config set container/cluster $CLUSTER
          gcloud container clusters get-credentials $CLUSTER

          envsubst kubernetes/deployment.yml | kubectl apply -f -
  merge_master:
    docker:
      - image: passfort/cloud-deploy:latest
    steps:
      - add_ssh_keys:
          fingerprints:
            - "2a:14:19:87:64:7e:84:b0:d4:d0:6d:4a:53:98:63:ec"
      - checkout
      - run: |
          git push origin $CIRCLE_BRANCH:master
  merge_testing:
    docker:
      - image: passfort/cloud-deploy:latest
    steps:
      - add_ssh_keys:
          fingerprints:
            - "2a:14:19:87:64:7e:84:b0:d4:d0:6d:4a:53:98:63:ec"
      - checkout
      - run: |
          git push -f origin $CIRCLE_BRANCH:testing
workflows:
  version: 2
  build_test_and_deploy:
    jobs:
      - build_and_test:
          filters:
            branches:
              ignore:
                - master
                - testing
      - push_and_deploy:
          requires:
            - build_and_test
          filters:
            branches:
              only:
                - staging
                - testing
      - deploy:
          filters:
            branches:
              only:
                - master
      - hold_production:
          type: approval
          filters:
            branches:
              only:
                - staging
      - hold_testing:
          type: approval
          filters:
            branches:
              ignore:
                - master
                - testing
                - staging
      - merge_master:
          requires:
            - push_and_deploy
            - hold_production
          filters:
            branches:
              only:
                - staging
      - merge_testing:
          requires:
            - build_and_test
            - hold_testing
          filters:
            branches:
              ignore:
                - master
                - testing
                - staging
